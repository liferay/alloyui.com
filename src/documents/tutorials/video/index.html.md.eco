---
layout: single-doc
title: Video
tags: 'video'
category: Video
description: Creates an interactive HTML5 video player with fallback Flash video player.
---

#### Getting Started

First load the seed file if you haven't yet.

``` html
<script src="<%= @getCdnSeed() %>"></script>
```

Then initialize AlloyUI and load the Video module.

``` javascript
AUI().use(
  'aui-video',
  function(A) {
    // code goes here
  }
);
```
---

#### Using Video

Create an HTML element:

``` html
<div id="myVideo"></div>
```

Now create a new instance of the Video component by setting `contentBox` to our HTML element's selector. Then, we'll pass the `url` parameter our video file's url. Finally, let's render it!

``` javascript
AUI().use(
  'aui-video',
  function(A) {
    new A.Video(
      {
        contentBox: '#myVideo',
        url: 'http://videos.liferay.com/webinars/2010-08-11.mp4'
      }
    ).render();
  }
);
```

<div class="alert alert-info">
  <strong>Note:</strong> you could also use `boundingBox`, instead of `contentBox`, to initialize.<br>
  [Read more about the differences between them](https://github.com/liferay/alloy-ui/wiki/FAQs).
</div>

---

#### Configuring Video

There are some other optional parameters that you can pass to your Video instance.

For example, you can specify the Video's `width` and `height` by passing integer values.  These values will become inline width and height pixel values.

``` javascript
AUI().use(
  'aui-video',
  function(A) {
    new A.Video(
      {
        contentBox: '#myVideo',
        height: 360,
        url: 'http://videos.liferay.com/webinars/2010-08-11.mp4',
        width: 640
      }
    ).render();
  }
);
```

If you want to load a poster image in the Video player before the user begins playing the video, pass the image url using the `poster` parameter.

``` javascript
AUI().use(
  'aui-video',
  function(A) {
    new A.Video(
      {
        contentBox: '#myVideo',
        height: 360,
        poster: 'assets/myPosterImg.jpg',
        url: 'http://videos.liferay.com/webinars/2010-08-11.mp4',
        width: 640
      }
    ).render();
  }
);
```

Video component supports Ogg Theora and Ogg Vorbis formatted media files as well.  If you want to use one of the supported Ogg formats, pass the Ogg file url using the `oggUrl` parameter.

``` javascript
AUI().use(
  'aui-video',
  function(A) {
    new A.Video(
      {
        contentBox: '#myVideo',
        ogvUrl: 'http://videos.liferay.com/lifecasts/portal/6.0/106.ogv'
      }
    ).render();
  }
);
```

<div class="alert alert-info">
  <strong>Note:</strong> Ogg files will only play in browsers that support the Ogg codec format.
</div>

You can even play non-supported formats in other browsers with the fallback Flash video player.  For example, you can play .mp4 files in Firefox by using the `swfUrl` parameter to play the Flash video.

``` javascript
AUI().use(
  'aui-video',
  function(A) {
    new A.Video(
      {
        contentBox: '#myVideo',
        swfUrl: 'http://videos.liferay.com/common/player.swf',
        url: 'http://videos.liferay.com/webinars/2010-08-11.mp4'
      }
    ).render();
  }
);
```

<div class="alert alert-success">
  For more information about configuration, check out our <a href="<%= @getSiteUrl() %>/api/">API Docs</a>.
</div>